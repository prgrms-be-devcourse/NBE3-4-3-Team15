/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/review/{reviewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 리뷰 수정 */
        put: operations["putReviews"];
        post?: never;
        /** 리뷰 삭제 */
        delete: operations["deleteReviews"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review/{reviewId}/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 리뷰 추천 */
        put: operations["recommendReview"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review/{reviewId}/comments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 리뷰 댓글 수정 */
        put: operations["putComment"];
        post?: never;
        /** 리뷰 댓글 삭제 */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review/{reviewId}/comments/{id}/recommend/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 리뷰 댓글 추천 */
        put: operations["recommendComment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/{notificationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["notificationCheck"];
        post?: never;
        delete: operations["notificationDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/mine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 회원 정보 조회 */
        get: operations["getMyProfile"];
        /** 회원 정보 수정 */
        put: operations["updateMyProfile"];
        post?: never;
        /** 회원 탈퇴 */
        delete: operations["delete_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/mine/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 비밀번호 변경 */
        put: operations["changePassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 리뷰 목록 */
        get: operations["getReviews"];
        put?: never;
        /** 리뷰 추가 */
        post: operations["postReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review/{reviewId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 리뷰 댓글 목록 조회 */
        get: operations["getComments"];
        put?: never;
        /** 리뷰 댓글 생성 */
        post: operations["postComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createNotification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원가입 */
        post: operations["join"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{id}/follow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["followOrUnfollow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그아웃 */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/challenge/{id}/validation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["validation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/challenge/{id}/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["join_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/challenge/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/book/{isbn}/favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 도서 찜하기 / 찜취소하기 */
        post: operations["favoriteBook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review/{reviewId}/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 대댓글 조회 */
        get: operations["getReplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review/{reviewId}/comments/review/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 댓글 검색 */
        get: operations["getUserComment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review/myReview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 유저의 리뷰 목록 조회 */
        get: operations["getUserReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserComment_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/review/books/{bookId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBookIdReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/myNotification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserIdNotification"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{id}/followings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFollowings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{id}/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFollowers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/book": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 도서 검색 */
        get: operations["searchBooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/book/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 도서 상세 검색 */
        get: operations["searchDetailBooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/book/favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 도서 찜 목록 */
        get: operations["getFavoriteBooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        MemberDto: {
            nickname: string;
            email: string;
            /** Format: int32 */
            gender?: number;
            /** Format: date */
            birth?: string;
            /** Format: int64 */
            id?: number;
            username: string;
            password1: string;
            password2: string;
        };
        ReviewCommentDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            reviewId?: number;
            /** Format: int64 */
            userId?: number;
            comment: string;
            /** Format: int64 */
            parentId?: number;
            /** Format: int32 */
            depth?: number;
            recommend?: components["schemas"]["MemberDto"][];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ReviewsDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            bookId: number;
            /** Format: int64 */
            userId?: number;
            content: string;
            /** Format: int32 */
            rating: number;
            reviewCommentDtos?: components["schemas"]["ReviewCommentDto"][];
            recommendMemberDtos?: components["schemas"]["MemberDto"][];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        GenericResponseReviewsDTO: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["ReviewsDTO"];
            success?: boolean;
        };
        GenericResponseReviewCommentDto: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["ReviewCommentDto"];
            success?: boolean;
        };
        GenericResponseString: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: string;
            success?: boolean;
        };
        MineDto: {
            nickname: string;
            email: string;
            /** Format: int32 */
            gender?: number;
            /** Format: date */
            birth?: string;
        };
        GenericResponseMemberDto: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["MemberDto"];
            success?: boolean;
        };
        PasswordChangeDto: {
            currentPassword: string;
            newPassword: string;
        };
        NotificationDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            memberId?: number;
            /** Format: int64 */
            reviewId?: number;
            /** Format: int64 */
            reviewComment?: number;
            content?: string;
            check?: boolean;
        };
        GenericResponseNotificationDTO: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["NotificationDTO"];
            success?: boolean;
        };
        LoginDto: {
            password: string;
            username: string;
        };
        ChallengeDto: {
            name: string;
            content: string;
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            /** @enum {string} */
            status?: "WAITING" | "START" | "REFUNDING" | "END";
            /** Format: int64 */
            totalDeposit?: number;
        };
        GenericResponseChallengeDto: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["ChallengeDto"];
            success?: boolean;
        };
        DepositDto: {
            /** Format: int64 */
            deposit: number;
        };
        BookDTO: {
            /** Format: int64 */
            id?: number;
            title?: string;
            author?: string;
            description?: string;
            image?: string;
            isbn?: string;
            /** Format: int32 */
            favoriteCount?: number;
        };
        GenericResponsePageReviewsDTO: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["PageReviewsDTO"];
            success?: boolean;
        };
        PageReviewsDTO: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ReviewsDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["Sortnull"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["Pageablenull"];
            empty?: boolean;
        };
        Pageablenull: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["Sortnull"];
            paged?: boolean;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            pageNumber?: number;
            unpaged?: boolean;
        };
        Sortnull: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        GenericResponseListReviewCommentDto: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["ReviewCommentDto"][];
            success?: boolean;
        };
        GenericResponseListReviewsDTO: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["ReviewsDTO"][];
            success?: boolean;
        };
        GenericResponseListNotificationDTO: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["NotificationDTO"][];
            success?: boolean;
        };
        FollowResponseDto: {
            username?: string;
            nickname?: string;
            /** Format: int64 */
            followerCount?: number;
            /** Format: int64 */
            followingCount?: number;
        };
        GenericResponseListFollowResponseDto: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["FollowResponseDto"][];
            success?: boolean;
        };
        GenericResponseMineDto: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["MineDto"];
            success?: boolean;
        };
        GenericResponsePageBookDTO: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["PageBookDTO"];
            success?: boolean;
        };
        PageBookDTO: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["BookDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["Sortnull"];
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["Pageablenull"];
            empty?: boolean;
        };
        GenericResponseBookDTO: {
            /** Format: date-time */
            timestamp?: string;
            message?: string;
            data?: components["schemas"]["BookDTO"];
            success?: boolean;
        };
        PasswordDto: {
            password: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    putReviews: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewsDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseReviewsDTO"];
                };
            };
        };
    };
    deleteReviews: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseReviewsDTO"];
                };
            };
        };
    };
    recommendReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseReviewsDTO"];
                };
            };
        };
    };
    putComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewCommentDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseReviewCommentDto"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseReviewCommentDto"];
                };
            };
        };
    };
    recommendComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseReviewCommentDto"];
                };
            };
        };
    };
    notificationCheck: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notificationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    notificationDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notificationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    getMyProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseMineDto"];
                };
            };
        };
    };
    updateMyProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MineDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseMemberDto"];
                };
            };
        };
    };
    delete_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChangeDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    getReviews: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponsePageReviewsDTO"];
                };
            };
        };
    };
    postReview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewsDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    getComments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseListReviewCommentDto"];
                };
            };
        };
    };
    postComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewCommentDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseReviewCommentDto"];
                };
            };
        };
    };
    createNotification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseNotificationDTO"];
                };
            };
        };
    };
    join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    followOrUnfollow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    validation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseChallengeDto"];
                };
            };
        };
    };
    join_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DepositDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseChallengeDto"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChallengeDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseChallengeDto"];
                };
            };
        };
    };
    favoriteBook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                isbn: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseString"];
                };
            };
        };
    };
    getReplies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseListReviewCommentDto"];
                };
            };
        };
    };
    getUserComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseListReviewCommentDto"];
                };
            };
        };
    };
    getUserReviews: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseListReviewsDTO"];
                };
            };
        };
    };
    getUserComment_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseListReviewCommentDto"];
                };
            };
        };
    };
    getBookIdReviews: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path: {
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponsePageReviewsDTO"];
                };
            };
        };
    };
    getUserIdNotification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseListNotificationDTO"];
                };
            };
        };
    };
    getFollowings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseListFollowResponseDto"];
                };
            };
        };
    };
    getFollowers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseListFollowResponseDto"];
                };
            };
        };
    };
    searchBooks: {
        parameters: {
            query: {
                query: string;
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponsePageBookDTO"];
                };
            };
        };
    };
    searchDetailBooks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponseBookDTO"];
                };
            };
        };
    };
    getFavoriteBooks: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GenericResponsePageBookDTO"];
                };
            };
        };
    };
}
